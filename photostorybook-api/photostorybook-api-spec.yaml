openapi: 3.0.3
info:
  title: PhotostoryBook service API.
  description: REST API for PhotostoryBook App
  version: 0.0.1-SNAPSHOT
servers:
  - url: https://127.0.0.1:8081/
  - url: http://127.0.0.1:8081/
tags:
  - name: photostories
    description: This section contains photostory endpoints
  - name: photos
    description: This section contains endpoints related to photo
  - name: user
    description: This section contains user endpoints

paths:
  /photostories:
    get:
      operationId: getPhotostories
      security:
        - oauth2photostorybook:
            - photostory.read
      tags:
        - photostories
      summary: Returns a list of all photostories

      description: |
        Returns a list of all photostories of the current authorized user.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotostoryListResponse'
        204:
          description: No photostory found.
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      operationId: addPhotostory
      tags:
        - photostories
      security:
        - oauth2photostorybook:
            - photostory.write
      summary: Creates a new photostory
      description: |
        Creates a new photostory for the current authorized user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                storyTitle:
                  type: string
                  example: An awesome title for a new photostory.
      responses:
        201:
          description: Successfully created a new photostory.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotostoryResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /photostories/view/{storyId}:
    get:
      tags:
        - photostories
      security:
        - oauth2photostorybook:
            - photostory.read
      summary: Get photostory identified by storyId
      operationId: getPhotostory
      parameters:
        - in: path
          name: storyId
          description: photostory id
          required: true
          schema:
            type: string
            format: uuid
            pattern: '^[0-9a-fA-F\-]{36}$'
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        200:
          description: Successfully retrieved photostory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotostoryResponse'

        204:
          description: Photostory contains no photos.
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /photostories/delete/{storyId}:
    post:
      operationId: deletePhotostory
      tags:
        - photostories
      security:
        - oauth2photostorybook:
            - photostory.delete
      summary: Delete a photostory
      description: |
        Deletes a photostory of the current authorized user.
      parameters:
        - in: path
          name: storyId
          description: photostory id
          required: true
          schema:
            type: string
            format: uuid
            pattern: '^[0-9a-fA-F\-]{36}$'
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        200:
          description: Successfully deleted photostory

  /photostories/edit/{storyId}:
    post:
      tags:
        - photostories
      security:
        - oauth2photostorybook:
            - photostory.write
      summary: modify photostory identified by storyId
      operationId: modifyPhotostory
      parameters:
        - in: path
          name: storyId
          description: photostory id
          required: true
          schema:
            type: string
            format: uuid
            pattern: '^[0-9a-fA-F\-]{36}$'
            example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                storyTitle:
                  type: string
                  example: "An awesome title for a new photostory."
                photoId:
                  type: string
                  format: uuid
                  pattern: '^[0-9a-fA-F\-]{36}$'
                  example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        202:
          description: Successfully modified photostory.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotostoryResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /photostories/view/{storyId}/photos:
    get:
      tags:
        - photostories
      security:
        - oauth2photostorybook:
            - photostory.read
      summary: Get all photo details of photostory identified by storyId
      operationId: getPhotostoryWithPhotos
      parameters:
        - in: path
          name: storyId
          description: photostory id
          required: true
          schema:
            type: string
            format: uuid
            pattern: '^[0-9a-fA-F\-]{36}$'
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        200:
          description: Successfully retrieved photos of photostory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotostoryWithPhotosResponse'

        204:
          description: Photostory contains no photos.
        401:
          $ref: '#/components/responses/UnauthorizedError'


  /photostories/edit/{storyId}/photos:
    post:
      tags:
        - photos
      security:
        - oauth2photostorybook:
            - photostory.write
      summary: Add a new photo to photostory identified by storyId
      operationId: uploadPhoto
      parameters:
        - in: path
          name: storyId
          description: photostory id
          required: true
          schema:
            type: string
            format: uuid
            pattern: '^[0-9a-fA-F\-]{36}$'
            example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        description: Photo image file in PNG format
        required: true
        content:
          image/jpg:
            schema:
              type: string
              format: byte
      responses:
        201:
          description: Successfully upload a photo.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotoDetailsResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /photostories/view/{storyId}/photos/{photoId}:
    get:
      tags:
        - photos
      security:
        - oauth2photostorybook:
            - photostory.read
      summary: Get selected photos with photoId of photostory identified by storyId
      operationId: downloadPhoto
      parameters:
        - in: path
          name: storyId
          description: photostory id
          required: true
          schema:
            type: string
            format: uuid
            pattern: '^[0-9a-fA-F\-]{36}$'
            example: "123e4567-e89b-12d3-a456-426614174000"
        - in: path
          name: photoId
          description: photo id
          required: true
          schema:
            type: string
            format: uuid
            pattern: '^[0-9a-fA-F\-]{36}$'
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        200:
          description: Successfully retrieved photos of photostory
          content:
            image/jpg:
              schema:
                type: string
                format: byte
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /photostories/view/{storyId}/thumbnails/{photoId}:
    get:
      tags:
        - photos
      security:
        - oauth2photostorybook:
            - photostory.read
      summary: Get selected thumbnails from photo with photoId of photostory identified by storyId
      operationId: downloadThumbnail
      parameters:
        - in: path
          name: storyId
          description: photostory id
          required: true
          schema:
            type: string
            format: uuid
            pattern: '^[0-9a-fA-F\-]{36}$'
            example: "123e4567-e89b-12d3-a456-426614174000"
        - in: path
          name: photoId
          description: photo id
          required: true
          schema:
            type: string
            format: uuid
            pattern: '^[0-9a-fA-F\-]{36}$'
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        200:
          description: Successfully retrieved thumbnail
          content:
            image/jpg:
              schema:
                type: string
                format: byte
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /photostories/edit/{storyId}/photos/{photoId}:
    delete:
      tags:
        - photos
      security:
        - oauth2photostorybook:
            - photostory.delete
      summary: Delete selected photos with photoId of photostory identified by storyId
      operationId: deletePhoto
      parameters:
        - in: path
          name: storyId
          description: photostory id
          required: true
          schema:
            type: string
            format: uuid
            pattern: '^[0-9a-fA-F\-]{36}$'
            example: "123e4567-e89b-12d3-a456-426614174000"
        - in: path
          name: photoId
          description: photo id
          required: true
          schema:
            type: string
            format: uuid
            pattern: '^[0-9a-fA-F\-]{36}$'
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        202:
          description: Photo successful deleted.
        204:
          description: Photo not found.
        401:
          $ref: '#/components/responses/UnauthorizedError'

components:
  schemas:
    ApiError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    PhotostoryResponse:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          pattern: '^[0-9a-fA-F\-]{36}$'
          example: "123e4567-e89b-12d3-a456-426614174000"
        storyTitle:
          type: string
          example: An awesome title for a new photostory.
        titlePhotoId:
          type: string
          format: uuid
          pattern: '^[0-9a-fA-F\-]{36}$'
          example: "123e4567-e89b-12d3-a456-426614174000"
      required:
        - uuid
        - storyTitle
    PhotostoryListResponse:
      type: object
      properties:
        photostories:
          type: array
          items:
            $ref: '#/components/schemas/PhotostoryResponse'
    PhotoDetailsResponse:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          pattern: '^[0-9a-fA-F\-]{36}$'
        photoTitle:
          type: string
          example: An awesome title for a photo.
      required:
        - uuid
    PhotostoryWithPhotosResponse:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          pattern: '^[0-9a-fA-F\-]{36}$'
          example: "123e4567-e89b-12d3-a456-426614174000"
        storyTitle:
          type: string
          example: An awesome title for a new photostory.
        titlePhotoId:
          type: string
          format: uuid
          pattern: '^[0-9a-fA-F\-]{36}$'
          example: "123e4567-e89b-12d3-a456-426614174000"
        photos:
          type: array
          items:
            $ref: '#/components/schemas/PhotoDetailsResponse'

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid

  securitySchemes:
    oauth2photostorybook:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /oauth/authorize
          tokenUrl: /oauth/token
          scopes:
            photostory.read: create and update photostories
            photostory.write: read photostories
            photostory.delete: delete photostories
